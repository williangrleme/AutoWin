// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/14/2023 16:04:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          controleAutomatico
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controleAutomatico_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CFG;
reg clk;
reg FA;
reg FF;
reg [4:0] HR_ATUAL;
reg ICHA;
reg ICHF;
reg ICMA;
reg ICMF;
reg [5:0] MIN_ATUAL;
// wires                                               
wire M;
wire SM;

// assign statements (if any)                          
controleAutomatico i1 (
// port map - connection between master ports and signals/registers   
	.CFG(CFG),
	.clk(clk),
	.FA(FA),
	.FF(FF),
	.HR_ATUAL(HR_ATUAL),
	.ICHA(ICHA),
	.ICHF(ICHF),
	.ICMA(ICMA),
	.ICMF(ICMF),
	.M(M),
	.MIN_ATUAL(MIN_ATUAL),
	.SM(SM)
);
initial 
begin 
#1000000 $finish;
end 

// CFG
initial
begin
	CFG = 1'b1;
	CFG = #360000 1'b0;
	CFG = #110000 1'b1;
	CFG = #30000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// ICHA
initial
begin
	repeat(14)
	begin
		ICHA = 1'b0;
		ICHA = #5000 1'b1;
		# 5000;
	end
	ICHA = 1'b0;
	ICHA = #340000 1'b1;
	ICHA = #10000 1'b0;
end 

// ICMA
initial
begin
	repeat(32)
	begin
		ICMA = 1'b0;
		ICMA = #5000 1'b1;
		# 5000;
	end
	ICMA = 1'b0;
end 

// ICHF
initial
begin
	repeat(14)
	begin
		ICHF = 1'b0;
		ICHF = #5000 1'b1;
		# 5000;
	end
	ICHF = 1'b0;
end 

// ICMF
initial
begin
	repeat(31)
	begin
		ICMF = 1'b0;
		ICMF = #5000 1'b1;
		# 5000;
	end
	ICMF = 1'b0;
	ICMF = #170000 1'b1;
	ICMF = #10000 1'b0;
end 
// HR_ATUAL[ 4 ]
initial
begin
	HR_ATUAL[4] = 1'b0;
end 
// HR_ATUAL[ 3 ]
initial
begin
	HR_ATUAL[3] = 1'b1;
end 
// HR_ATUAL[ 2 ]
initial
begin
	HR_ATUAL[2] = 1'b1;
end 
// HR_ATUAL[ 1 ]
initial
begin
	HR_ATUAL[1] = 1'b1;
end 
// HR_ATUAL[ 0 ]
initial
begin
	HR_ATUAL[0] = 1'b0;
end 
// MIN_ATUAL[ 5 ]
initial
begin
	MIN_ATUAL[5] = 1'b1;
end 
// MIN_ATUAL[ 4 ]
initial
begin
	MIN_ATUAL[4] = 1'b0;
end 
// MIN_ATUAL[ 3 ]
initial
begin
	MIN_ATUAL[3] = 1'b0;
end 
// MIN_ATUAL[ 2 ]
initial
begin
	MIN_ATUAL[2] = 1'b0;
end 
// MIN_ATUAL[ 1 ]
initial
begin
	MIN_ATUAL[1] = 1'b0;
end 
// MIN_ATUAL[ 0 ]
initial
begin
	MIN_ATUAL[0] = 1'b0;
end 

// FA
initial
begin
	FA = 1'b0;
	FA = #430000 1'b1;
	FA = #10000 1'b0;
end 

// FF
initial
begin
	FF = 1'b0;
	FF = #540000 1'b1;
	FF = #10000 1'b0;
end 
endmodule

