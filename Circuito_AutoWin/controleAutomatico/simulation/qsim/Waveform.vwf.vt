// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/14/2023 14:00:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          controleAutomatico
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controleAutomatico_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg FA;
reg FF;
reg RD;
reg RL;
// wires                                               
wire M;
wire SM;

// assign statements (if any)                          
controleAutomatico i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.FA(FA),
	.FF(FF),
	.M(M),
	.RD(RD),
	.RL(RL),
	.SM(SM)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// RL
initial
begin
	RL = 1'b0;
	RL = #20000 1'b1;
	RL = #20000 1'b0;
	RL = #220000 1'b1;
	RL = #40000 1'b0;
end 

// RD
initial
begin
	RD = 1'b0;
	RD = #130000 1'b1;
	RD = #20000 1'b0;
	RD = #300000 1'b1;
	RD = #50000 1'b0;
end 

// FA
initial
begin
	FA = 1'b0;
	FA = #70000 1'b1;
	FA = #10000 1'b0;
	FA = #270000 1'b1;
	FA = #40000 1'b0;
end 

// FF
initial
begin
	FF = 1'b0;
	FF = #210000 1'b1;
	FF = #20000 1'b0;
	FF = #330000 1'b1;
	FF = #40000 1'b0;
end 
endmodule

